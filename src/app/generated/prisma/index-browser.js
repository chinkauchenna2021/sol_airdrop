
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.11.1
 * Query Engine version: f40f79ec31188888a2e33acda0ecc8fd10a853a9
 */
Prisma.prismaVersion = {
  client: "6.11.1",
  engine: "f40f79ec31188888a2e33acda0ecc8fd10a853a9"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  walletAddress: 'walletAddress',
  twitterId: 'twitterId',
  twitterUsername: 'twitterUsername',
  twitterName: 'twitterName',
  twitterImage: 'twitterImage',
  twitterFollowers: 'twitterFollowers',
  twitterActivity: 'twitterActivity',
  level: 'level',
  streak: 'streak',
  lastCheckIn: 'lastCheckIn',
  referralCode: 'referralCode',
  email: 'email',
  totalPoints: 'totalPoints',
  totalTokens: 'totalTokens',
  rank: 'rank',
  isAdmin: 'isAdmin',
  isActive: 'isActive',
  totalEarnedTokens: 'totalEarnedTokens',
  lastLoginReward: 'lastLoginReward',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  permissions: 'permissions',
  riskScore: 'riskScore',
  suspiciousFlags: 'suspiciousFlags',
  isBanned: 'isBanned',
  bannedAt: 'bannedAt',
  lastActivity: 'lastActivity',
  claimsEnabled: 'claimsEnabled'
};

exports.Prisma.PointHistoryScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  points: 'points',
  tokens: 'tokens',
  type: 'type',
  action: 'action',
  description: 'description',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.ReferralScalarFieldEnum = {
  id: 'id',
  referrerId: 'referrerId',
  referredId: 'referredId',
  tokens: 'tokens',
  completed: 'completed',
  createdAt: 'createdAt',
  isActive: 'isActive'
};

exports.Prisma.TwitterEngagementScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  tweetId: 'tweetId',
  engagementType: 'engagementType',
  tokens: 'tokens',
  verified: 'verified',
  createdAt: 'createdAt'
};

exports.Prisma.TaskCompletionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  taskId: 'taskId',
  completed: 'completed',
  points: 'points',
  tokens: 'tokens',
  rewardType: 'rewardType',
  metadata: 'metadata',
  completedAt: 'completedAt',
  createdAt: 'createdAt'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  type: 'type',
  points: 'points',
  tokens: 'tokens',
  rewardType: 'rewardType',
  requirements: 'requirements',
  isActive: 'isActive',
  expiresAt: 'expiresAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClaimScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  amount: 'amount',
  transactionHash: 'transactionHash',
  status: 'status',
  paymentMethod: 'paymentMethod',
  metadata: 'metadata',
  processedAt: 'processedAt',
  feesPaid: 'feesPaid',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  type: 'type',
  nftPasses: 'nftPasses',
  userTier: 'userTier'
};

exports.Prisma.SystemConfigScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AnalyticsScalarFieldEnum = {
  id: 'id',
  date: 'date',
  totalUsers: 'totalUsers',
  activeUsers: 'activeUsers',
  totalClaims: 'totalClaims',
  totalPoints: 'totalPoints',
  totalTokens: 'totalTokens',
  totalEngagements: 'totalEngagements',
  metadata: 'metadata',
  createdAt: 'createdAt'
};

exports.Prisma.DailyEarningScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  tokens: 'tokens',
  points: 'points',
  type: 'type',
  rewardType: 'rewardType',
  claimedAt: 'claimedAt'
};

exports.Prisma.AirdropSeasonScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  status: 'status',
  totalAllocation: 'totalAllocation',
  claimedAmount: 'claimedAmount',
  startDate: 'startDate',
  endDate: 'endDate',
  nftPassRequired: 'nftPassRequired',
  requireApproval: 'requireApproval',
  feeAmount: 'feeAmount',
  createdBy: 'createdBy',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AirdropClaimScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  seasonId: 'seasonId',
  tokens: 'tokens',
  tier: 'tier',
  paymentSignature: 'paymentSignature',
  transactionSignature: 'transactionSignature',
  status: 'status',
  claimedAt: 'claimedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NftCollectionScalarFieldEnum = {
  id: 'id',
  mintAddress: 'mintAddress',
  name: 'name',
  symbol: 'symbol',
  description: 'description',
  uri: 'uri',
  supply: 'supply',
  createdBy: 'createdBy',
  metadata: 'metadata',
  minted: 'minted',
  creatorWallet: 'creatorWallet',
  royaltyPercentage: 'royaltyPercentage',
  isActive: 'isActive',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NftDistributionScalarFieldEnum = {
  id: 'id',
  mintAddress: 'mintAddress',
  distributedBy: 'distributedBy',
  recipientCount: 'recipientCount',
  recipientWallets: 'recipientWallets',
  nftsPerRecipient: 'nftsPerRecipient',
  nftsPerUser: 'nftsPerUser',
  results: 'results',
  transactionHash: 'transactionHash',
  errorMessage: 'errorMessage',
  collectionId: 'collectionId',
  success: 'success',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.NftClaimApprovalScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  approved: 'approved',
  approvedBy: 'approvedBy',
  approvedAt: 'approvedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  claimed: 'claimed',
  claimedAt: 'claimedAt'
};

exports.Prisma.UserNftHoldingScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  mintAddress: 'mintAddress',
  tokenAccount: 'tokenAccount',
  amount: 'amount',
  metadata: 'metadata',
  acquiredAt: 'acquiredAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AdminSessionScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  permissions: 'permissions',
  expiresAt: 'expiresAt',
  lastActivity: 'lastActivity',
  createdAt: 'createdAt'
};

exports.Prisma.AdminAuditLogScalarFieldEnum = {
  id: 'id',
  adminId: 'adminId',
  action: 'action',
  metadata: 'metadata',
  timestamp: 'timestamp',
  ipAddress: 'ipAddress',
  createdAt: 'createdAt'
};

exports.Prisma.FraudAlertScalarFieldEnum = {
  id: 'id',
  type: 'type',
  severity: 'severity',
  userId: 'userId',
  description: 'description',
  evidence: 'evidence',
  riskScore: 'riskScore',
  status: 'status',
  createdAt: 'createdAt',
  investigatedBy: 'investigatedBy',
  resolvedAt: 'resolvedAt'
};

exports.Prisma.CampaignConfigScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  tokenMint: 'tokenMint',
  totalAllocation: 'totalAllocation',
  startDate: 'startDate',
  endDate: 'endDate',
  eligibilityCriteria: 'eligibilityCriteria',
  distributionRules: 'distributionRules',
  isActive: 'isActive',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.AchievementScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  icon: 'icon',
  requirements: 'requirements',
  points: 'points',
  isSecret: 'isSecret',
  createdAt: 'createdAt'
};

exports.Prisma.UserAchievementScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  achievementId: 'achievementId',
  unlockedAt: 'unlockedAt',
  progress: 'progress'
};

exports.Prisma.NotificationScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  title: 'title',
  message: 'message',
  type: 'type',
  read: 'read',
  actionUrl: 'actionUrl',
  createdAt: 'createdAt'
};

exports.Prisma.TwitterAnalyticsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  tweetId: 'tweetId',
  likes: 'likes',
  retweets: 'retweets',
  comments: 'comments',
  impressions: 'impressions',
  engagement_rate: 'engagement_rate',
  calculatedAt: 'calculatedAt'
};

exports.Prisma.NftClaimScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  userWallet: 'userWallet',
  mintAddress: 'mintAddress',
  nftNumber: 'nftNumber',
  paymentSignature: 'paymentSignature',
  createSignature: 'createSignature',
  transferSignature: 'transferSignature',
  status: 'status',
  errorMessage: 'errorMessage',
  metadata: 'metadata',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.TwitterActivity = exports.$Enums.TwitterActivity = {
  HIGH: 'HIGH',
  MEDIUM: 'MEDIUM',
  LOW: 'LOW'
};

exports.EngagementType = exports.$Enums.EngagementType = {
  LIKE: 'LIKE',
  RETWEET: 'RETWEET',
  COMMENT: 'COMMENT',
  QUOTE: 'QUOTE',
  FOLLOW: 'FOLLOW'
};

exports.TaskType = exports.$Enums.TaskType = {
  SOCIAL_TWITTER: 'SOCIAL_TWITTER',
  SOCIAL_DISCORD: 'SOCIAL_DISCORD',
  WALLET_CONNECT: 'WALLET_CONNECT',
  REFERRAL: 'REFERRAL',
  DAILY_CHECK_IN: 'DAILY_CHECK_IN',
  CUSTOM: 'CUSTOM'
};

exports.ClaimStatus = exports.$Enums.ClaimStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED',
  CANCELLED: 'CANCELLED'
};

exports.PaymentMethod = exports.$Enums.PaymentMethod = {
  SOLANA: 'SOLANA',
  USDC: 'USDC'
};

exports.NotificationType = exports.$Enums.NotificationType = {
  INFO: 'INFO',
  SUCCESS: 'SUCCESS',
  WARNING: 'WARNING',
  ERROR: 'ERROR',
  ACHIEVEMENT: 'ACHIEVEMENT'
};

exports.Prisma.ModelName = {
  User: 'User',
  PointHistory: 'PointHistory',
  Referral: 'Referral',
  TwitterEngagement: 'TwitterEngagement',
  TaskCompletion: 'TaskCompletion',
  Task: 'Task',
  Claim: 'Claim',
  SystemConfig: 'SystemConfig',
  Analytics: 'Analytics',
  DailyEarning: 'DailyEarning',
  AirdropSeason: 'AirdropSeason',
  AirdropClaim: 'AirdropClaim',
  NftCollection: 'NftCollection',
  NftDistribution: 'NftDistribution',
  NftClaimApproval: 'NftClaimApproval',
  UserNftHolding: 'UserNftHolding',
  AdminSession: 'AdminSession',
  AdminAuditLog: 'AdminAuditLog',
  FraudAlert: 'FraudAlert',
  CampaignConfig: 'CampaignConfig',
  Achievement: 'Achievement',
  UserAchievement: 'UserAchievement',
  Notification: 'Notification',
  TwitterAnalytics: 'TwitterAnalytics',
  NftClaim: 'NftClaim'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
